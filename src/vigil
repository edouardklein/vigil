#!/usr/bin/env python
"""
Vigil.

Usage:
vigil [-c] [<input-file>]

>>> from scripttest import TestFileEnvironment
>>> env = TestFileEnvironment('./tmp')
>>> print(env.run('../test/html_article.sh'))
Script result: ../test/html_article.sh
-- stdout: --------------------
@misc{HowtoclimbtheKilimanjarolikeanalpinist,
 abstract = {On the first day, climb 700m with a 20kg backpack, on the
second climb 1200m with only food and water. We give advice
on how to climb Kilimanjaro without porter, with one’s own
equipment and food, and on how to minimize the price. How to
climb the Kilimanjaro like an alpinist Edouard Klein, edou
-at- rdklein.frReleased under Creative Commons CC-by-SA
licence. Therefore the short answer to “How to climb Mount
Kilimanjaro like an alpinist” is : Don’t. 3.1 Dura lex, sed
lexIn a perfect world, climbing Mount Kilimanjaro would be a
matter settled between you and Mount Kilimanjaro.},
 author = {Edou -at- Rdklein Fr and Edouard Klein},
 keywords = {alpinist, altitude, camp, climb, climbing, day, guide,
guides, kilimanjaro, mountain, porters},
 title = {How to climb the Kilimanjaro like an alpinist},
 url = {http://rdklein.fr/essays/kilimanjaro.html}
}
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>

>>> print(env.run('../test/hn_article.sh'))
Script result: ../test/hn_article.sh
-- stdout: --------------------
@misc{PhilipZimmermannkingofencryptionrevealshisfearsforprivacy,
 Annote = {https://news.ycombinator.com/item?id=9600906},
 abstract = {Zimmermann and Snowden are 30 years apart in age, but their
actions have framed the privacy debate. British society is
“too accepting of surveillance”, Zimmermann believes. When
Philip Zimmermann was campaigning for nuclear disarmament in
the 1980s, he kept an escape plan in his back pocket.
Zimmermann hopes to make money, but for the father of email
cryptography, the political still trumps the commercial. The
Silent Phone and Silent Text apps, which allow secure voice
calls and text messages over Android and Apple handsets, are
even more popular, particularly with journalists working in
dangerous places and businesses handling sensitive
information.},
 author = {Juliette Garside},
 keywords = {computer, email, encryption, fears, king, nuclear, pgp,
philip, privacy, private, reveals, silent, snowden,
surveillance, text, zimmermann},
 month = {5},
 title = {Philip Zimmermann: king of encryption reveals his fears for
privacy},
 url = {http://www.theguardian.com/technology/2015/may/25/philip-
zimmermann-king-encryption-reveals-fears-privacy},
 year = {2015}
}
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>

>>> print(env.run('../test/reddit_article.sh'))
Script result: ../test/reddit_article.sh
-- stdout: --------------------
@misc{HowtoclimbtheKilimanjarolikeanalpinist,
 Annote = {https://www.reddit.com/r/alpinism/comments/2f6aai/how_to_cli
mb_the_kilimanjaro_like_an_alpinist/},
 abstract = {On the first day, climb 700m with a 20kg backpack, on the
second climb 1200m with only food and water. We give advice
on how to climb Kilimanjaro without porter, with one’s own
equipment and food, and on how to minimize the price. How to
climb the Kilimanjaro like an alpinist Edouard Klein, edou
-at- rdklein.frReleased under Creative Commons CC-by-SA
licence. Therefore the short answer to “How to climb Mount
Kilimanjaro like an alpinist” is : Don’t. 3.1 Dura lex, sed
lexIn a perfect world, climbing Mount Kilimanjaro would be a
matter settled between you and Mount Kilimanjaro.},
 author = {Edou -at- Rdklein Fr and Edouard Klein},
 keywords = {alpinist, altitude, camp, climb, climbing, day, guide,
guides, kilimanjaro, mountain, porters, alpinism},
 title = {How to climb the Kilimanjaro like an alpinist},
 url = {http://rdklein.fr/essays/kilimanjaro.html}
}
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>

"""
import newspaper
import pyperclip
from docopt import docopt
import bibtexparser
import textwrap
import urllib
from bs4 import BeautifulSoup
import re


FIELDS = ['authors', 'title', 'summary', 'url', 'keywords']
FIELD_CONVERTER = {'authors': lambda l: ' and '.join(sorted(l)),
                   'keywords': lambda l: ', '.join(sorted(l))}
FIELD_TO_BIB = {'authors': 'author', 'summary': 'abstract'}


def url_to_bibentry(url):
    '''Return the bibtex record corresponding to the document pointed to in
    the url'''
    article = newspaper.Article(url)
    article.download()
    if not article.is_downloaded:
        raise RuntimeError("Could not download : "+url)
    article.parse()
    article.nlp()
    key = re.sub('[\Wéàèêôîû]', '', article.title)
    bib_entry = {'type': 'misc', 'id': key}
    for field in FIELDS:
        value = article.__dict__[field]
        if field in FIELD_CONVERTER:
            f = FIELD_CONVERTER[field]
        else:
            f = lambda x: x
        if field in FIELD_TO_BIB:
            bib_key = FIELD_TO_BIB[field]
        else:
            bib_key = field
        if value:
            bib_entry[bib_key] = textwrap.fill(f(value), width=60)
    if article.publish_date:
        bib_entry['year'] = str(article.publish_date.year)
        bib_entry['month'] = str(article.publish_date.month)
    return bib_entry


def bibentry_to_str(bib_entry):
    """Dump a bibtex entry as a string"""
    db = bibtexparser.bibdatabase.BibDatabase()
    db.entries = [bib_entry]
    return bibtexparser.dumps(db)


def HN_to_bibentry(line):
    """Return the bibentry for the link the HN discussion is about"""
    soup = BeautifulSoup(urllib.request.urlopen(line).read())
    a = soup.findAll(attrs={'class': 'title'})[1].findAll('a')[0]
    target_url = a.attrs['href']
    bib_entry = url_to_bibentry(target_url)
    bib_entry['Annote'] = line
    return bib_entry


def reddit_to_bibentry(line):
    '''Return the bibentry for the link the reddit discussion is about'''
    # Reddit returns a HTTP 429 error if it does not like our user agent,
    # see : https://stackoverflow.com/questions/13213048/urllib2-http-error-429
    hdr = {'User-Agent':
           'Vigil bibliographic tool : https://github.com/edouardklein/vigil'}
    req = urllib.request.Request(line, headers=hdr)
    soup = BeautifulSoup(urllib.request.urlopen(req).read())
    a = soup.findAll('p', attrs={'class': 'title'})[0].findAll('a')[0]
    target_url = a.attrs['href']
    if target_url.startswith('/r/'):  # Self post
        target_url = 'http://reddit.com'+target_url
    bib_entry = url_to_bibentry(target_url)
    bib_entry['Annote'] = textwrap.fill(line, 60)
    subreddit = urllib.parse.urlsplit(line).path.split('/')[2]
    bib_entry['keywords'] += ', '+subreddit
    return bib_entry


def main():
    '''Main function'''
    answer = ''
    arguments = docopt(__doc__, version='Vigil 0.0')
    input_file = arguments['<input-file>'] or '/dev/stdin'
    with open(input_file, 'r') as input_fd:
        for line in [l.strip() for l in input_fd.readlines() if l.strip()]:
            if 'news.ycombinator' in line:
                bib_entry = HN_to_bibentry(line)
            elif 'reddit.com' in line:
                bib_entry = reddit_to_bibentry(line)
            else:
                bib_entry = url_to_bibentry(line.strip())
            bib_element = bibentry_to_str(bib_entry)
            if arguments['-c']:
                answer += bib_element
            print(bib_element)
    if arguments['-c']:
        pyperclip.copy(answer)
    exit(0)

if __name__ == '__main__':
    main()
